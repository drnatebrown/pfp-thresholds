CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")

# Set a default build type if none was specified
# ------------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
endif()

message(STATUS "Install directory: ${CMAKE_INSTALL_PREFIX}")

# About this project
# ------------------------------------------------------------------------------
project(PFP-thresholds)
SET(VERSION_MAJOR "0")
SET(VERSION_MINOR "1")
SET(VERSION_PATCH "0")
SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")

option(COMPILE_TESTS "Set ON to compile the tests" OFF)
option(COMPILE_BWT2LCP "Set ON to compile the bwt2lcp versions" OFF)
option(COMPILE_GSACAK "Set ON to compile the gsacak versions" OFF)

# Set environment
# ------------------------------------------------------------------------------
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)


find_package(Git)
if(GIT_FOUND)
    message(STATUS "git found: ${GIT_EXECUTABLE}")
else()
    message(WARNING "git not found. Cloning of submodules will not work.")
endif()



# Configure thirdparty
# ------------------------------------------------------------------------------
set(CMAKE_INSTALL_INCLUDEDIR "include") # This is an hack because include(GUIInstallDirs) doesn't work

add_subdirectory(thirdparty)


# Configure the compiler with the appropriate flags
# ------------------------------------------------------------------------------
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
  # using Clang
  include(ConfigureCompilerClang)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # using GCC
  include(ConfigureCompilerGcc)
else ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	message(FATAL_ERROR "Only the compiler gcc and clang are supported")
endif()

add_subdirectory(include)
add_subdirectory(test)
add_subdirectory(utils)


set(PFP_EXE ${PFP})
set(PFP_THRESHOLDS_VERSION ${VERSION})
# Configure pipeline for build folder
set(USE_INSTALL_PATH False)
configure_file(${PROJECT_SOURCE_DIR}/pipeline/thresholds.in ${PROJECT_BINARY_DIR}/thresholds @ONLY)

# Configure pipeline for install folder
set(USE_INSTALL_PATH True)
configure_file(${PROJECT_SOURCE_DIR}/pipeline/thresholds.in ${PROJECT_BINARY_DIR}/thresholds.install @ONLY)

if(${COMPILE_BWT2LCP})
  configure_file(${PROJECT_SOURCE_DIR}/pipeline/bwt_lcp_thresholds ${PROJECT_BINARY_DIR}/bwt_lcp_thresholds)
  configure_file(${PROJECT_SOURCE_DIR}/pipeline/bwt_lcp ${PROJECT_BINARY_DIR}/bwt_lcp)
endif()

install(TARGETS pfp_lcp pfp_lcp64 pfp_thresholds pfp_thresholds64 TYPE RUNTIME)
install(PROGRAMS ${PROJECT_BINARY_DIR}/thresholds.install RENAME thresholds TYPE BIN)